
(** Function declaration decisions

    This defines the kind of decisions that can take place
    when processing a function delcaration.
    Closure decides during the declaration fo a function
    whether all its direct call will be inlined or not.
    On the other hand, flambda1 delays this decision until
    each call, deciding whether to inline depending on the
    estimated benefits of inlining according to the context.
*)

type flambda2_inline_reason =
  | Attribute
  (** An attribute on the function declaration directed to
      inline the function. *)
  | Size of {
      body_size : int;
      size_threshold : Inlining_threshold.t;
    }
  (** Without attributes, the size of the function's body
      was computed, and was lower than the threshold, and
      thus the function will be inlined. *)
(** The reasons why fladba2/closure decides to inline a
    function. *)

type decision =

  (* Flambda1 *)

  | No_decision
  (** As stated above, flambda1 does not make any decision
      at function declaration time. *)


  (* Flambda2 *)

  | Never_inline_attribute
  (** An attribute [@inline never] was on the declaration *)
  | Function_body_too_large of Inlining_threshold.t
  (** The function's body size was larger than the inlining
      threshold. According to closure's startegy, this is the
      deciding factor for whether to inline a function, and
      thus the function will not be inlined. *)
  | Stub
  (** Function is a stub, most likely generated by the compiler
      at some points. It is very much desirable to inline it
      if we know that information. *)
  | Inline of flambda2_inline_reason
  (** The flambda2/closure inliner has decided to inline the
      function, because of the given reason. *)


type t = {
  code_id : Code_id.t;
  before_simplify : decision;
  after_simplify : decision;
}
(** The decision that can be made when processing the declaration
    of a function (identified by its code_id).
    Flambda2 performs two passes on each function declaration,
    once before simplification, and a second pass after
    simplification. Since that distinction also makes sense for
    other inlining strategies, this distinction is kept here. *)


